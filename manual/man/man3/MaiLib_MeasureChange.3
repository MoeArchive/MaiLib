.TH "MaiLib.MeasureChange" 3 "Sun Feb 5 2023" "Version 1.0.4.0" "MaiLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaiLib.MeasureChange \- Defines measure change note that indicates a measure change in bar\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBMaiLib\&.Note\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMeasureChange\fP ()"
.br
.RI "Construct Empty\&. "
.ti -1c
.RI "\fBMeasureChange\fP (int bar, int tick, int quaver)"
.br
.RI "Construct BPMChange with given bar, tick, BPM\&. "
.ti -1c
.RI "\fBMeasureChange\fP (\fBMeasureChange\fP takeIn)"
.br
.RI "Construct measureChange from another takeIn\&. "
.ti -1c
.RI "override bool \fBCheckValidity\fP ()"
.br
.RI "See if current note has all information needed\&. "
.ti -1c
.RI "override string \fBCompose\fP (int format)"
.br
.RI "Convert note to string for writing\&. "
.ti -1c
.RI "override \fBNote\fP \fBNewInstance\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBMaiLib\&.Note\fP
.in +1c
.ti -1c
.RI "\fBNote\fP ()"
.br
.RI "Construct an empty note\&. "
.ti -1c
.RI "\fBNote\fP (\fBNote\fP inTake)"
.br
.RI "Construct a note from other note\&. "
.ti -1c
.RI "abstract bool \fBCheckValidity\fP ()"
.br
.RI "See if current note has all information needed\&. "
.ti -1c
.RI "abstract string \fBCompose\fP (int format)"
.br
.RI "Convert note to string for writing\&. "
.ti -1c
.RI "abstract \fBNote\fP \fBNewInstance\fP ()"
.br
.ti -1c
.RI "int \fBCompareTo\fP (Object? obj)"
.br
.ti -1c
.RI "bool \fBEquals\fP (\fBNote\fP? other)"
.br
.ti -1c
.RI "virtual void \fBFlip\fP (string method)"
.br
.RI "Flip the note according to the method specified\&. "
.ti -1c
.RI "bool \fBUpdate\fP ()"
.br
.RI "Updates this note instance\&. "
.ti -1c
.RI "void \fBReplaceBPMChanges\fP (\fBBPMChanges\fP changeTable)"
.br
.RI "Replace this\&.BPMChangeNotes from change table given\&. "
.ti -1c
.RI "void \fBReplaceBPMChanges\fP (List< \fBBPMChange\fP > changeTable)"
.br
.RI "Replace this\&.BPMChangeNotes from change table given\&. "
.ti -1c
.RI "string \fBGenerateAppropriateLength\fP (int length)"
.br
.RI "Generate appropriate length for hold and slide\&. "
.ti -1c
.RI "string \fBGenerateAppropriateLength\fP (int length, double bpm)"
.br
.RI "Generate appropriate length for hold and slide\&. "
.ti -1c
.RI "double \fBGetTimeStamp\fP (int overallTick)"
.br
.RI "Give time stamp given overall tick\&. "
.in -1c
.in +1c
.ti -1c
.RI "string \fBCompose\fP (int format)"
.br
.RI "Convert note to string for writing\&. "
.ti -1c
.RI "bool \fBCheckValidity\fP ()"
.br
.RI "See if current note has all information needed\&. "
.ti -1c
.RI "bool \fBUpdate\fP ()"
.br
.RI "Updates this note instance\&. "
.ti -1c
.RI "void \fBFlip\fP (string method)"
.br
.RI "Flip the note according to the method specified\&. "
.ti -1c
.RI "double \fBGetTimeStamp\fP (int overallTick)"
.br
.RI "Give time stamp given overall tick\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBQuaver\fP\fC [get]\fP"
.br
.RI "Return this\&.quaver\&. "
.ti -1c
.RI "override string \fBNoteGenre\fP\fC [get]\fP"
.br
.ti -1c
.RI "override bool \fBIsNote\fP\fC [get]\fP"
.br
.ti -1c
.RI "override string \fBNoteSpecificGenre\fP\fC [get]\fP"
.br
.in -1c

Properties inherited from \fBMaiLib\&.Note\fP
.in +1c
.ti -1c
.RI "string \fBNoteType\fP\fC [get, set]\fP"
.br
.RI "Access NoteType\&. "
.ti -1c
.RI "string \fBKey\fP\fC [get, set]\fP"
.br
.RI "Access Key\&. "
.ti -1c
.RI "int \fBKeyNum\fP\fC [get]\fP"
.br
.RI "Get the number value of Key\&. "
.ti -1c
.RI "string \fBKeyGroup\fP\fC [get]\fP"
.br
.RI "Get the key group of the key - only for touch notes\&. "
.ti -1c
.RI "int \fBBar\fP\fC [get, set]\fP"
.br
.RI "Access Bar\&. "
.ti -1c
.RI "int \fBTick\fP\fC [get, set]\fP"
.br
.RI "Access Tick\&. "
.ti -1c
.RI "int \fBFixedTick\fP\fC [get, set]\fP"
.br
.RI "Access FixedTick\&. "
.ti -1c
.RI "int \fBTickStamp\fP\fC [get, set]\fP"
.br
.RI "Access Tick Stamp = this\&.Bar*384 + this\&.Tick\&. "
.ti -1c
.RI "double \fBTickTimeStamp\fP\fC [get, set]\fP"
.br
.RI "Access Tick Stamp = this\&.Bar*384 + this\&.Tick\&. "
.ti -1c
.RI "int \fBWaitLength\fP\fC [get, set]\fP"
.br
.RI "Access wait time\&. "
.ti -1c
.RI "int \fBWaitTickStamp\fP\fC [get, set]\fP"
.br
.RI "Access the time stamp where wait time ends in ticks\&. "
.ti -1c
.RI "double \fBWaitTimeStamp\fP\fC [get, set]\fP"
.br
.RI "Access the time stamp where wait time ends in seconds\&. "
.ti -1c
.RI "double \fBCalculatedWaitTime\fP\fC [get, set]\fP"
.br
.RI "Gets or sets the calculated wait time\&. "
.ti -1c
.RI "int \fBLastLength\fP\fC [get, set]\fP"
.br
.RI "Access EndTime\&. "
.ti -1c
.RI "int \fBFixedLastLength\fP\fC [get, set]\fP"
.br
.RI "Access FixedEndTime\&. "
.ti -1c
.RI "int \fBLastTickStamp\fP\fC [get, set]\fP"
.br
.RI "Access Last time in ticks\&. "
.ti -1c
.RI "double \fBLastTimeStamp\fP\fC [get, set]\fP"
.br
.RI "Access last time in seconds\&. "
.ti -1c
.RI "double \fBCalculatedLastTime\fP\fC [get, set]\fP"
.br
.RI "Gets or sets the calculated last time in seconds\&. "
.ti -1c
.RI "bool \fBTickBPMDisagree\fP\fC [get, set]\fP"
.br
.RI "Stores if the wait or last are in different BPM\&. "
.ti -1c
.RI "string \fBEndKey\fP\fC [get, set]\fP"
.br
.RI "Access EndKey\&. "
.ti -1c
.RI "int \fBEndKeyNum\fP\fC [get]\fP"
.br
.RI "Get the number value of End Key\&. "
.ti -1c
.RI "bool \fBDelayed\fP\fC [get, set]\fP"
.br
.RI "Access Delayed\&. "
.ti -1c
.RI "double \fBBPM\fP\fC [get, set]\fP"
.br
.RI "Access BPM\&. "
.ti -1c
.RI "\fBNote\fP? \fBPrev\fP\fC [get, set]\fP"
.br
.RI "Access this\&.prev;\&. "
.ti -1c
.RI "\fBNote\fP? \fBNext\fP\fC [get, set]\fP"
.br
.RI "Access this\&.next\&. "
.ti -1c
.RI "\fBNote\fP? \fBSlideStart\fP\fC [get, set]\fP"
.br
.RI "Return the slide start of a note (reserved for slides only) "
.ti -1c
.RI "\fBNote\fP? \fBConsecutiveSlide\fP\fC [get, set]\fP"
.br
.RI "Return the consecutive of a note (reserved for slides only) "
.ti -1c
.RI "List< \fBBPMChange\fP > \fBBPMChangeNotes\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract string \fBNoteSpecificGenre\fP\fC [get]\fP"
.br
.RI "Return this\&.SpecificType\&. "
.ti -1c
.RI "abstract string \fBNoteGenre\fP\fC [get]\fP"
.br
.RI "Return this\&.noteGenre\&. "
.ti -1c
.RI "abstract bool \fBIsNote\fP\fC [get]\fP"
.br
.RI "Return if this is a true note\&. "
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBMaiLib\&.Note\fP
.in +1c
.ti -1c
.RI "static double \fBGetBPMTimeUnit\fP (double bpm)"
.br
.RI "Get BPM Time tick unit of bpm\&. "
.in -1c
.SH "Detailed Description"
.PP 
Defines measure change note that indicates a measure change in bar\&. 
.PP
Definition at line \fB6\fP of file \fBMeasureChange\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MaiLib\&.MeasureChange\&.MeasureChange ()"

.PP
Construct Empty\&. 
.PP
Definition at line \fB13\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "MaiLib\&.MeasureChange\&.MeasureChange (int bar, int tick, int quaver)"

.PP
Construct BPMChange with given bar, tick, BPM\&. 
.PP
\fBParameters\fP
.RS 4
\fIbar\fP Bar
.br
\fItick\fP Tick
.br
\fIQuaver\fP Quaver
.RE
.PP

.PP
Definition at line \fB26\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "MaiLib\&.MeasureChange\&.MeasureChange (\fBMeasureChange\fP takeIn)"

.PP
Construct measureChange from another takeIn\&. 
.PP
\fBParameters\fP
.RS 4
\fItakeIn\fP Another measure change note
.RE
.PP

.PP
Definition at line \fB38\fP of file \fBMeasureChange\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "override bool MaiLib\&.MeasureChange\&.CheckValidity ()\fC [virtual]\fP"

.PP
See if current note has all information needed\&. 
.PP
\fBReturns\fP
.RS 4
True if qualified, false otherwise
.RE
.PP

.PP
Implements \fBMaiLib\&.Note\fP\&.
.PP
Definition at line \fB55\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "override string MaiLib\&.MeasureChange\&.Compose (int format)\fC [virtual]\fP"

.PP
Convert note to string for writing\&. 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP 0 if Simai, 1 if Ma2
.RE
.PP

.PP
Implements \fBMaiLib\&.Note\fP\&.
.PP
Definition at line \fB60\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "override \fBNote\fP MaiLib\&.MeasureChange\&.NewInstance ()\fC [virtual]\fP"

.PP
Implements \fBMaiLib\&.Note\fP\&.
.PP
Definition at line \fB71\fP of file \fBMeasureChange\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "override bool MaiLib\&.MeasureChange\&.IsNote\fC [get]\fP"

.PP
Definition at line \fB79\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "override string MaiLib\&.MeasureChange\&.NoteGenre\fC [get]\fP"

.PP
Definition at line \fB77\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "override string MaiLib\&.MeasureChange\&.NoteSpecificGenre\fC [get]\fP"

.PP
Definition at line \fB81\fP of file \fBMeasureChange\&.cs\fP\&.
.SS "int MaiLib\&.MeasureChange\&.Quaver\fC [get]\fP"

.PP
Return this\&.quaver\&. Quaver
.PP
Definition at line \fB50\fP of file \fBMeasureChange\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MaiLib from the source code\&.
