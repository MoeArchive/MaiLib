.TH "MaiLib.XmlInformation" 3 "Sun Feb 5 2023" "Version 1.0.4.0" "MaiLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaiLib.XmlInformation \- Using Xml to store trackInformation\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBMaiLib\&.TrackInformation\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBXmlInformation\fP ()"
.br
.RI "Using take in Xml to store trackInformation: "
.ti -1c
.RI "\fBXmlInformation\fP (string location)"
.br
.ti -1c
.RI "void \fBGenerateEmptyStoredXML\fP ()"
.br
.RI "Generate new music\&.xml for export\&. "
.ti -1c
.RI "XmlElement \fBCreateNotesInformation\fP (Dictionary< string, string > information, int chartIndex)"
.br
.ti -1c
.RI "override void \fBUpdate\fP ()"
.br
.RI "Update information\&. "
.in -1c

Public Member Functions inherited from \fBMaiLib\&.TrackInformation\fP
.in +1c
.ti -1c
.RI "\fBTrackInformation\fP ()"
.br
.RI "Empty constructor\&. "
.ti -1c
.RI "void \fBFormatInformation\fP ()"
.br
.RI "Add in necessary nodes in information\&. "
.ti -1c
.RI "void \fBFormatDummyInformation\fP ()"
.br
.RI "Add in necessary nodes in information for dummy chart\&. "
.ti -1c
.RI "XmlNodeList \fBGetMatchNodes\fP (string name)"
.br
.RI "Return the XML node that has same name with\&. "
.ti -1c
.RI "void \fBSave\fP (string location)"
.br
.RI "Save the information to given path\&. "
.ti -1c
.RI "abstract void \fBUpdate\fP ()"
.br
.RI "Update information\&. "
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBMaiLib\&.TrackInformation\fP
.in +1c
.ti -1c
.RI "static string \fBCompensateZero\fP (string intake)"
.br
.RI "Compensate 0 for music IDs\&. "
.ti -1c
.RI "static string \fBCompensateShortZero\fP (string intake)"
.br
.RI "Compensate 0 for short music IDs\&. "
.in -1c

Static Public Attributes inherited from \fBMaiLib\&.TrackInformation\fP
.in +1c
.ti -1c
.RI "static readonly string[] \fBlevel\fP = { '1', '2', '3', '4', '5', '6', '7', '7+', '8', '8+', '9', '9+', '10', '10+', '11', '11+', '12', '12+', '13', '13+', '14', '14+', '15', '15+' }"
.br
.RI "Stores proper difficulties\&. "
.ti -1c
.RI "static readonly string[] \fBdifficulty\fP = { 'Basic', 'Advance', 'Expert', 'Master', 'Remaster', 'Utage', 'Easy' }"
.br
.ti -1c
.RI "static readonly string[] \fBaddVersion\fP = { 'Ver1\&.00\&.00'}"
.br
.ti -1c
.RI "static readonly string[] \fBgenre\fP = { '東方Project', 'maimai' }"
.br
.RI "Stores the genre name used in information\&. "
.ti -1c
.RI "static readonly string[] \fBversion\fP = { 'maimai', 'maimai PLUS', 'maimai GreeN', 'maimai GreeN PLUS', 'maimai ORANGE', 'maimai ORANGE PLUS', 'maimai PiNK', 'maimai PiNK PLUS', 'maimai MURASAKi', 'maimai MURASAKi PLUS', 'maimai MiLK', 'maimai MiLK PLUS', 'maimai FiNALE', 'maimai DX', 'maimai DX PLUS', 'maimai DX Splash', 'maimai DX Splash PLUS', 'maimai DX UNiVERSE', 'maimai DX UNiVERSE PLUS' }"
.br
.RI "Stores prover maimai versions\&. "
.ti -1c
.RI "static readonly string[] \fBshortVersion\fP = { 'maimai', 'PLUS', 'GreeN', 'GreeN PLUS', 'ORANGE', 'ORANGE PLUS', 'PiNK', 'PiNK PLUS', 'MURASAKi', 'MURASAKi PLUS', 'MiLK', 'MiLK PLUS', 'FiNALE', 'DX', 'DX PLUS', 'DX Splash', 'DX Splash PLUS', 'DX UNiVERSE', 'DX UNiVERSE PLUS' }"
.br
.ti -1c
.RI "static string[] \fBversionArray\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBnetOpenNameDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBreleaseTagNameDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBrightsInfoDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBartistNameDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBaddVersionDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBeventNameDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBsubEventNameDic\fP"
.br
.ti -1c
.RI "static Dictionary< string, string > \fBnotesDesignerDic\fP"
.br
.in -1c

Properties inherited from \fBMaiLib\&.TrackInformation\fP
.in +1c
.ti -1c
.RI "string \fBTrackName\fP\fC [get, set]\fP"
.br
.RI "Return the track name\&. "
.ti -1c
.RI "string \fBTrackSortName\fP\fC [get, set]\fP"
.br
.RI "Return the sort name (basically English or Katakana) "
.ti -1c
.RI "string \fBTrackID\fP\fC [get, set]\fP"
.br
.RI "Return the track ID (4 digit, having 00 for SD 01 for DX) "
.ti -1c
.RI "string \fBTrackGenre\fP\fC [get, set]\fP"
.br
.RI "Return the track genre (By default cabinet 6 categories) "
.ti -1c
.RI "string \fBTrackBPM\fP\fC [get, set]\fP"
.br
.RI "Return the track global BPM\&. "
.ti -1c
.RI "string \fBTrackComposer\fP\fC [get, set]\fP"
.br
.RI "Return the track composer\&. "
.ti -1c
.RI "string \fBTrackSymbolicLevel\fP\fC [get, set]\fP"
.br
.RI "Return the most representative level of the track = set by default master\&. "
.ti -1c
.RI "string[] \fBTrackLevels\fP\fC [get, set]\fP"
.br
.RI "Return track levels by [Easy, Basic, Advance, Expert, Master, Remaster, Utage]\&. "
.ti -1c
.RI "string[] \fBTrackDecimalLevels\fP\fC [get, set]\fP"
.br
.RI "Return track decimal levels by [Easy, Basic, Advance, Expert, Master, Remaster, Utage] * Utage returns utage level\&. "
.ti -1c
.RI "string \fBDXChartTrackPathSuffix\fP\fC [get]\fP"
.br
.RI "Return the suffix of Track title for export\&. "
.ti -1c
.RI "string \fBStandardDeluxePrefix\fP\fC [get]\fP"
.br
.RI "Returns if the track is Standard or Deluxe\&. "
.ti -1c
.RI "string \fBStandardDeluxeSuffix\fP\fC [get]\fP"
.br
.RI "Title suffix for better distinguish\&. "
.ti -1c
.RI "bool \fBIsDXChart\fP\fC [get]\fP"
.br
.RI "See if the chart is DX chart\&. "
.ti -1c
.RI "string \fBTrackVersion\fP\fC [get, set]\fP"
.br
.RI "Return this\&.TrackVersion\&. "
.ti -1c
.RI "string \fBTrackVersionNumber\fP\fC [get, set]\fP"
.br
.RI "Return this\&.TrackVersionNumber\&. "
.ti -1c
.RI "XmlDocument \fBTakeInValue\fP\fC [get, set]\fP"
.br
.RI "Give access to TakeInValue if necessary\&. "
.ti -1c
.RI "Dictionary< string, string > \fBInformation\fP\fC [get, set]\fP"
.br
.RI "Give access to this\&.Information\&. "
.in -1c
.SH "Detailed Description"
.PP 
Using Xml to store trackInformation\&. 
.PP
Definition at line \fB9\fP of file \fBXmlInformation\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MaiLib\&.XmlInformation\&.XmlInformation ()"

.PP
Using take in Xml to store trackInformation: 
.PP
Definition at line \fB14\fP of file \fBXmlInformation\&.cs\fP\&.
.SS "MaiLib\&.XmlInformation\&.XmlInformation (string location)"

.PP
Definition at line \fB19\fP of file \fBXmlInformation\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "XmlElement MaiLib\&.XmlInformation\&.CreateNotesInformation (Dictionary< string, string > information, int chartIndex)"

.PP
Definition at line \fB284\fP of file \fBXmlInformation\&.cs\fP\&.
.SS "void MaiLib\&.XmlInformation\&.GenerateEmptyStoredXML ()"

.PP
Generate new music\&.xml for export\&. 
.PP
Definition at line \fB38\fP of file \fBXmlInformation\&.cs\fP\&.
.SS "override void MaiLib\&.XmlInformation\&.Update ()\fC [virtual]\fP"

.PP
Update information\&. 
.PP
Implements \fBMaiLib\&.TrackInformation\fP\&.
.PP
Definition at line \fB291\fP of file \fBXmlInformation\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MaiLib from the source code\&.
