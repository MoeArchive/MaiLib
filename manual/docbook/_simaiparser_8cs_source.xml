<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__simaiparser_8cs_source" xml:lang="en-US">
<title>Simaiparser.cs</title>
<indexterm><primary>Neskol/MaiLib/Simaiparser.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__simaiparser_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Generic;
<anchor xml:id="__simaiparser_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>System.Runtime.CompilerServices;
<anchor xml:id="__simaiparser_8cs_source_1l00003"/>00003 
<anchor xml:id="__simaiparser_8cs_source_1l00004"/>00004 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_mai_lib">MaiLib</link>;
<anchor xml:id="__simaiparser_8cs_source_1l00005"/>00005 
<anchor xml:id="__simaiparser_8cs_source_1l00009"/><link linkend="_class_mai_lib_1_1_simai_parser">00009</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_mai_lib_1_1_simai_parser">SimaiParser</link>&#32;:&#32;<link linkend="_interface_mai_lib_1_1_i_parser">IParser</link>
<anchor xml:id="__simaiparser_8cs_source_1l00010"/>00010 {
<anchor xml:id="__simaiparser_8cs_source_1l00014"/><link linkend="_class_mai_lib_1_1_simai_parser_1a7053d1ff5b56e1869f341ed7da060ca4">00014</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a7053d1ff5b56e1869f341ed7da060ca4">MaximumDefinition</link>&#32;=&#32;384;
<anchor xml:id="__simaiparser_8cs_source_1l00015"/>00015 
<anchor xml:id="__simaiparser_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Tap&#32;PreviousSlideStart;
<anchor xml:id="__simaiparser_8cs_source_1l00017"/>00017 
<anchor xml:id="__simaiparser_8cs_source_1l00021"/><link linkend="_class_mai_lib_1_1_simai_parser_1a6a0167580c4073983421a40e0cf68ccb">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a6a0167580c4073983421a40e0cf68ccb">SimaiParser</link>()
<anchor xml:id="__simaiparser_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap();
<anchor xml:id="__simaiparser_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00025"/>00025 
<anchor xml:id="__simaiparser_8cs_source_1l00031"/><link linkend="_class_mai_lib_1_1_simai_parser_1ae561ab49360dfaef3824f290b28ab0f3">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_b_p_m_changes">BPMChanges</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1ae561ab49360dfaef3824f290b28ab0f3">BPMChangesOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;Simai&#32;does&#32;not&#32;have&#32;this&#32;component&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00035"/>00035 
<anchor xml:id="__simaiparser_8cs_source_1l00036"/><link linkend="_class_mai_lib_1_1_simai_parser_1a75daa422a02846657dc667def18d43a9">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_chart">Chart</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a75daa422a02846657dc667def18d43a9">ChartOfToken</link>(<emphasis role="keywordtype">string</emphasis>[]&#32;tokens)
<anchor xml:id="__simaiparser_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;here&#32;chart&#32;will&#32;only&#32;return&#32;syntax&#32;after&#32;&amp;inote_x=&#32;and&#32;each&#32;token&#32;is&#32;separated&#32;by&#32;&quot;,&quot;</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;Note&gt;&#32;notes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Note&gt;();
<anchor xml:id="__simaiparser_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_b_p_m_changes">BPMChanges</link>&#32;bpmChanges&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_b_p_m_changes">BPMChanges</link>();
<anchor xml:id="__simaiparser_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_measure_changes">MeasureChanges</link>&#32;measureChanges&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_measure_changes">MeasureChanges</link>(4,&#32;4);
<anchor xml:id="__simaiparser_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bar&#32;=&#32;0;
<anchor xml:id="__simaiparser_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tick&#32;=&#32;0;
<anchor xml:id="__simaiparser_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;currentBPM&#32;=&#32;0.0;
<anchor xml:id="__simaiparser_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tickStep&#32;=&#32;0;
<anchor xml:id="__simaiparser_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tokens.Length;&#32;i++)
<anchor xml:id="__simaiparser_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;eachPairCandidates&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1ad59f30b47d5cc9441f5eecc0f2bf7c63">EachGroupOfToken</link>(tokens[i]);
<anchor xml:id="__simaiparser_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;eachNote&#32;<emphasis role="keywordflow">in</emphasis>&#32;eachPairCandidates)
<anchor xml:id="__simaiparser_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;noteCandidate&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a34e13e65ff9befef8e3910514ef68cd9">NoteOfToken</link>(eachNote,&#32;bar,&#32;tick,&#32;currentBPM);
<anchor xml:id="__simaiparser_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;containsBPM&#32;=&#32;noteCandidate.<link linkend="_class_mai_lib_1_1_note_1a15f933472746a63f10ccef80e1b77af7">NoteSpecificGenre</link>.Equals(<emphasis role="stringliteral">&quot;BPM&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;containsMeasure&#32;=&#32;noteCandidate.<link linkend="_class_mai_lib_1_1_note_1a15f933472746a63f10ccef80e1b77af7">NoteSpecificGenre</link>.Equals(<emphasis role="stringliteral">&quot;MEASURE&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00054"/>00054 
<anchor xml:id="__simaiparser_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(containsBPM)
<anchor xml:id="__simaiparser_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;bpmCandidate&#32;=&#32;eachNote.Replace(&quot;(&quot;,&#32;&quot;&quot;).Replace(&quot;)&quot;,&#32;&quot;&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;noteCandidate&#32;=&#32;new&#32;BPMChange(bar,&#32;tick,&#32;Double.Parse(bpmCandidate));</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteCandidate.Bar&#32;=&#32;bar;
<anchor xml:id="__simaiparser_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteCandidate.Tick&#32;=&#32;tick;
<anchor xml:id="__simaiparser_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//notes.Add(changeNote);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentBPM&#32;=&#32;noteCandidate.<link linkend="_class_mai_lib_1_1_note_1ab50fc72781bfd8173feab554b2ab2087">BPM</link>;
<anchor xml:id="__simaiparser_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bpmChanges.<link linkend="_class_mai_lib_1_1_b_p_m_changes_1aa363e2df4f91c7a6466f0c865c00e5b4">Add</link>((<link linkend="_class_mai_lib_1_1_b_p_m_change">BPMChange</link>)noteCandidate);
<anchor xml:id="__simaiparser_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(containsMeasure)
<anchor xml:id="__simaiparser_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__simaiparser_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;quaverCandidate&#32;=&#32;eachNote.Replace(<emphasis role="stringliteral">&quot;{&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>).Replace(<emphasis role="stringliteral">&quot;}&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tickStep&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a7053d1ff5b56e1869f341ed7da060ca4">MaximumDefinition</link>&#32;/&#32;Int32.Parse(quaverCandidate);
<anchor xml:id="__simaiparser_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MeasureChange&#32;changeNote&#32;=&#32;new&#32;MeasureChange(bar,&#32;tick,&#32;tickStep);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//notes.Add(changeNote);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00073"/>00073 
<anchor xml:id="__simaiparser_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">/*if&#32;(currentBPM&#32;&gt;&#32;0.0)*/</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;notes.Add(noteCandidate);
<anchor xml:id="__simaiparser_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00079"/>00079 
<anchor xml:id="__simaiparser_8cs_source_1l00080"/>00080 
<anchor xml:id="__simaiparser_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tick&#32;+=&#32;tickStep;
<anchor xml:id="__simaiparser_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tick&#32;&gt;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a7053d1ff5b56e1869f341ed7da060ca4">MaximumDefinition</link>)
<anchor xml:id="__simaiparser_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tick&#32;-=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a7053d1ff5b56e1869f341ed7da060ca4">MaximumDefinition</link>;
<anchor xml:id="__simaiparser_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bar++;
<anchor xml:id="__simaiparser_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_chart">Chart</link>&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_simai">Simai</link>(notes,&#32;bpmChanges,&#32;measureChanges);
<anchor xml:id="__simaiparser_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00091"/>00091 
<anchor xml:id="__simaiparser_8cs_source_1l00092"/><link linkend="_class_mai_lib_1_1_simai_parser_1af36d079d0d484536180da3158d75889a">00092</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_hold">Hold</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1af36d079d0d484536180da3158d75889a">HoldOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bar,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tick,&#32;<emphasis role="keywordtype">double</emphasis>&#32;bpm)
<anchor xml:id="__simaiparser_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;keyCandidate&#32;=&#32;token.Substring(0,&#32;sustainSymbol);&#32;<emphasis role="comment">//key&#32;candidate&#32;is&#32;like&#32;tap&#32;grammar</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(keyCandidate);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(sustainCandidate);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;holdType&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;specialEffect&#32;=&#32;0;
<anchor xml:id="__simaiparser_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;sustainIsSecond&#32;=&#32;sustainCandidate.Contains(&quot;##&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;(sustainIsSecond)</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;string[]&#32;secondCandidates&#32;=&#32;sustainCandidate.Split(&quot;##&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00106"/>00106 
<anchor xml:id="__simaiparser_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keyCandidate.Contains(<emphasis role="stringliteral">&quot;C&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;holdType&#32;=&#32;<emphasis role="stringliteral">&quot;THO&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;0C&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keyCandidate.Contains(<emphasis role="stringliteral">&quot;f&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;specialEffect&#32;=&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keyCandidate.Contains(<emphasis role="stringliteral">&quot;x&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;keyCandidate.Replace(<emphasis role="stringliteral">&quot;h&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;key.Replace(<emphasis role="stringliteral">&quot;x&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(key);
<anchor xml:id="__simaiparser_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>.Parse(key)&#32;-&#32;1).ToString();
<anchor xml:id="__simaiparser_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;holdType&#32;=&#32;<emphasis role="stringliteral">&quot;XHO&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;keyCandidate.Replace(<emphasis role="stringliteral">&quot;h&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(key);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>.Parse(key)&#32;-&#32;1).ToString();
<anchor xml:id="__simaiparser_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;holdType&#32;=&#32;<emphasis role="stringliteral">&quot;HLD&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;lastTimeCandidates&#32;=&#32;sustainCandidate.Split(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;quaver&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(lastTimeCandidates[0]);
<anchor xml:id="__simaiparser_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lastTick&#32;=&#32;384&#32;/&#32;quaver;
<anchor xml:id="__simaiparser_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;times&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(lastTimeCandidates[1]);
<anchor xml:id="__simaiparser_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastTick&#32;*=&#32;times;
<anchor xml:id="__simaiparser_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_hold">Hold</link>&#32;candidate;
<anchor xml:id="__simaiparser_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.Replace(<emphasis role="stringliteral">&quot;h&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(key);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(holdType.Equals(<emphasis role="stringliteral">&quot;THO&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;candidate&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_hold">Hold</link>(holdType,&#32;bar,&#32;tick,&#32;key,&#32;lastTick,&#32;specialEffect,&#32;<emphasis role="stringliteral">&quot;M1&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;candidate&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_hold">Hold</link>(holdType,&#32;bar,&#32;tick,&#32;key,&#32;lastTick);
<anchor xml:id="__simaiparser_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;candidate.BPM&#32;=&#32;bpm;
<anchor xml:id="__simaiparser_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;candidate;
<anchor xml:id="__simaiparser_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00151"/>00151 
<anchor xml:id="__simaiparser_8cs_source_1l00152"/><link linkend="_class_mai_lib_1_1_simai_parser_1a3e1f7b490fe5ceda9e7b60bfd52a1c8b">00152</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_hold">Hold</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a3e1f7b490fe5ceda9e7b60bfd52a1c8b">HoldOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__simaiparser_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00156"/>00156 
<anchor xml:id="__simaiparser_8cs_source_1l00157"/><link linkend="_class_mai_lib_1_1_simai_parser_1af0ac35fa8697947dfb333ce79e6b730b">00157</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_measure_changes">MeasureChanges</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1af0ac35fa8697947dfb333ce79e6b730b">MeasureChangesOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__simaiparser_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00161"/>00161 
<anchor xml:id="__simaiparser_8cs_source_1l00162"/><link linkend="_class_mai_lib_1_1_simai_parser_1a34e13e65ff9befef8e3910514ef68cd9">00162</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a34e13e65ff9befef8e3910514ef68cd9">NoteOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rest();
<anchor xml:id="__simaiparser_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isRest&#32;=&#32;token.Equals(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isBPM&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isMeasure&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSlide&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isHold&#32;=&#32;!isSlide&#32;&amp;&amp;&#32;token.Contains(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSlide)
<anchor xml:id="__simaiparser_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a2ec28e7a8e35d34bf176488015193dea">SlideOfToken</link>(token);
<anchor xml:id="__simaiparser_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isHold)
<anchor xml:id="__simaiparser_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1af36d079d0d484536180da3158d75889a">HoldOfToken</link>(token);
<anchor xml:id="__simaiparser_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isBPM)
<anchor xml:id="__simaiparser_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//throw&#32;new&#32;NotImplementedException(&quot;IsBPM&#32;is&#32;not&#32;supported&#32;in&#32;simai&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;bpmCandidate&#32;=&#32;token;</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bpmCandidate.Replace(&quot;(&quot;,&#32;&quot;&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bpmCandidate.Replace(&quot;)&quot;,&#32;&quot;&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//result&#32;=&#32;new&#32;BPMChange(bar,&#32;tick,&#32;Double.Parse(bpmCandidate));</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isMeasure)
<anchor xml:id="__simaiparser_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;IsMeasure&#32;is&#32;not&#32;supported&#32;in&#32;simai&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;quaverCandidate&#32;=&#32;token;</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quaverCandidate.Replace(&quot;{&quot;,&#32;&quot;&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quaverCandidate.Replace(&quot;}&quot;,&#32;&quot;&quot;);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//result&#32;=&#32;new&#32;MeasureChange(bar,&#32;tick,&#32;Int32.Parse(quaverCandidate));</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a5ef9810c4ab7c4ceff8933801c533095">TapOfToken</link>(token);
<anchor xml:id="__simaiparser_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00209"/>00209 
<anchor xml:id="__simaiparser_8cs_source_1l00210"/><link linkend="_class_mai_lib_1_1_simai_parser_1af494dd884247e91c65dc226d82a4c06f">00210</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1af494dd884247e91c65dc226d82a4c06f">NoteOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bar,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tick,&#32;<emphasis role="keywordtype">double</emphasis>&#32;bpm)
<anchor xml:id="__simaiparser_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rest(<emphasis role="stringliteral">&quot;RST&quot;</emphasis>,&#32;bar,&#32;tick);
<anchor xml:id="__simaiparser_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isRest&#32;=&#32;token.Equals(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isBPM&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isMeasure&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSlide&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isHold&#32;=&#32;!isSlide&#32;&amp;&amp;&#32;token.Contains(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00227"/>00227 
<anchor xml:id="__simaiparser_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isRest)
<anchor xml:id="__simaiparser_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSlide)
<anchor xml:id="__simaiparser_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a2ec28e7a8e35d34bf176488015193dea">SlideOfToken</link>(token,&#32;bar,&#32;tick,&#32;PreviousSlideStart,&#32;bpm);
<anchor xml:id="__simaiparser_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isHold)
<anchor xml:id="__simaiparser_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1af36d079d0d484536180da3158d75889a">HoldOfToken</link>(token,&#32;bar,&#32;tick,&#32;bpm);
<anchor xml:id="__simaiparser_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isBPM)
<anchor xml:id="__simaiparser_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;bpmCandidate&#32;=&#32;token.Replace(<emphasis role="stringliteral">&quot;(&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>).Replace(<emphasis role="stringliteral">&quot;)&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_b_p_m_change">BPMChange</link>(bar,&#32;tick,&#32;Double.Parse(bpmCandidate));
<anchor xml:id="__simaiparser_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isMeasure)
<anchor xml:id="__simaiparser_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;quaverCandidate&#32;=&#32;token.Replace(<emphasis role="stringliteral">&quot;{&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>).Replace(<emphasis role="stringliteral">&quot;}&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_measure_change">MeasureChange</link>(bar,&#32;tick,&#32;Int32.Parse(quaverCandidate));
<anchor xml:id="__simaiparser_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!token.Equals(<emphasis role="stringliteral">&quot;E&quot;</emphasis>)&#32;&amp;&amp;&#32;!token.Equals(<emphasis role="stringliteral">&quot;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a5ef9810c4ab7c4ceff8933801c533095">TapOfToken</link>(token,&#32;bar,&#32;tick,&#32;bpm);
<anchor xml:id="__simaiparser_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.<link linkend="_class_mai_lib_1_1_note_1a15f933472746a63f10ccef80e1b77af7">NoteSpecificGenre</link>.Equals(<emphasis role="stringliteral">&quot;SLIDE_START&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart&#32;=&#32;(Tap)result;
<anchor xml:id="__simaiparser_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00257"/>00257 
<anchor xml:id="__simaiparser_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00260"/>00260 
<anchor xml:id="__simaiparser_8cs_source_1l00261"/><link linkend="_class_mai_lib_1_1_simai_parser_1a2ec28e7a8e35d34bf176488015193dea">00261</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_slide">Slide</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a2ec28e7a8e35d34bf176488015193dea">SlideOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bar,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tick,&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;slideStart,&#32;<emphasis role="keywordtype">double</emphasis>&#32;bpm)
<anchor xml:id="__simaiparser_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;slideStartCandidate&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(slideStart);
<anchor xml:id="__simaiparser_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mai_lib_1_1_note">Note</link>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;endKeyCandidate&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sustainSymbol&#32;=&#32;0;
<anchor xml:id="__simaiparser_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;sustainCandidate&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Parse&#32;first&#32;section</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;qq&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(2,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SXR&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SUR&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;pp&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(2,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SXL&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SUL&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SV_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SF_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;0&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;1&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;6&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;7&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SCL&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SCR&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00325"/>00325 
<anchor xml:id="__simaiparser_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;0&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;1&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;6&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreviousSlideStart.Key.Equals(<emphasis role="stringliteral">&quot;7&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SCR&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SCL&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00340"/>00340 
<anchor xml:id="__simaiparser_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SSL&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SSR&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(2,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sllCandidate&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(slideStartCandidate.<link linkend="_class_mai_lib_1_1_note_1ae93ef9ee5987428ab77603867d3ed864">Key</link>)&#32;+&#32;2;
<anchor xml:id="__simaiparser_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;slrCandidate&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(slideStartCandidate.<link linkend="_class_mai_lib_1_1_note_1ae93ef9ee5987428ab77603867d3ed864">Key</link>)&#32;-&#32;2;
<anchor xml:id="__simaiparser_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;inflectionCandidate&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(token.Substring(1,&#32;1))&#32;-&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(inflectionCandidate&#32;&lt;&#32;0)</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;inflectionCandidate&#32;+=&#32;8;</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//else&#32;if&#32;(inflectionCandidate&#32;&gt;&#32;7)</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;inflectionCandidate&#32;-=&#32;8;</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00371"/>00371 
<anchor xml:id="__simaiparser_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Revalue&#32;SLL&#32;and&#32;SLR&#32;candidate</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sllCandidate&#32;&lt;&#32;0)
<anchor xml:id="__simaiparser_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sllCandidate&#32;+=&#32;8;
<anchor xml:id="__simaiparser_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sllCandidate&#32;&gt;&#32;7)
<anchor xml:id="__simaiparser_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sllCandidate&#32;-=&#32;8;
<anchor xml:id="__simaiparser_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slrCandidate&#32;&lt;&#32;0)
<anchor xml:id="__simaiparser_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slrCandidate&#32;+=&#32;8;
<anchor xml:id="__simaiparser_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slrCandidate&#32;&gt;&#32;7)
<anchor xml:id="__simaiparser_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slrCandidate&#32;-=&#32;8;
<anchor xml:id="__simaiparser_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00389"/>00389 
<anchor xml:id="__simaiparser_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSLL&#32;=&#32;sllCandidate&#32;==&#32;inflectionCandidate;
<anchor xml:id="__simaiparser_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSLR&#32;=&#32;slrCandidate&#32;==&#32;inflectionCandidate;
<anchor xml:id="__simaiparser_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSLL)
<anchor xml:id="__simaiparser_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SLL&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSLR)
<anchor xml:id="__simaiparser_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SLR&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(isSLL&#32;||&#32;isSLR))
<anchor xml:id="__simaiparser_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Start&#32;Key:&quot;</emphasis>&#32;+&#32;slideStartCandidate.<link linkend="_class_mai_lib_1_1_note_1ae93ef9ee5987428ab77603867d3ed864">Key</link>);
<anchor xml:id="__simaiparser_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Expected&#32;inflection&#32;point:&#32;SLL&#32;for&#32;&quot;</emphasis>&#32;+&#32;sllCandidate&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;and&#32;SLR&#32;for&#32;&quot;</emphasis>&#32;+&#32;slrCandidate);
<anchor xml:id="__simaiparser_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Actual:&#32;&quot;</emphasis>&#32;+&#32;inflectionCandidate);
<anchor xml:id="__simaiparser_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;InvalidDataException(<emphasis role="stringliteral">&quot;THE&#32;INFLECTION&#32;POINT&#32;GIVEN&#32;IS&#32;NOT&#32;MATCHING!&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00410"/>00410 
<anchor xml:id="__simaiparser_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;=&#32;token.Substring(1,&#32;1);
<anchor xml:id="__simaiparser_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainSymbol&#32;=&#32;token.IndexOf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sustainCandidate&#32;=&#32;token.Substring(sustainSymbol&#32;+&#32;1).Split(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)[0];&#32;<emphasis role="comment">//sustain&#32;candidate&#32;is&#32;like&#32;1:2</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteType&#32;=&#32;<emphasis role="stringliteral">&quot;SI_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00418"/>00418 
<anchor xml:id="__simaiparser_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(&quot;Key&#32;Candidate:&#32;&quot;+keyCandidate);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fixedKeyCandidate&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(endKeyCandidate)&#32;-&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fixedKeyCandidate&#32;&lt;&#32;0)
<anchor xml:id="__simaiparser_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endKeyCandidate&#32;+=&#32;8;
<anchor xml:id="__simaiparser_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSecond&#32;=&#32;sustainCandidate.Contains(<emphasis role="stringliteral">&quot;##&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isSecond)
<anchor xml:id="__simaiparser_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;lastTimeCandidates&#32;=&#32;sustainCandidate.Split(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;quaver&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(lastTimeCandidates[0]);
<anchor xml:id="__simaiparser_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lastTick&#32;=&#32;384&#32;/&#32;quaver;
<anchor xml:id="__simaiparser_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;times&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.Parse(lastTimeCandidates[1]);
<anchor xml:id="__simaiparser_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastTick&#32;*=&#32;times;
<anchor xml:id="__simaiparser_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_slide">Slide</link>(noteType,&#32;bar,&#32;tick,&#32;slideStartCandidate.<link linkend="_class_mai_lib_1_1_note_1ae93ef9ee5987428ab77603867d3ed864">Key</link>,&#32;96,&#32;lastTick,&#32;fixedKeyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.SlideStart&#32;=&#32;slideStartCandidate;
<anchor xml:id="__simaiparser_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;timeCandidates&#32;=&#32;sustainCandidate.Split(<emphasis role="stringliteral">&quot;##&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;waitLengthCandidate&#32;=&#32;<emphasis role="keywordtype">double</emphasis>.Parse(timeCandidates[0]);
<anchor xml:id="__simaiparser_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;lastLengthCandidate&#32;=&#32;<emphasis role="keywordtype">double</emphasis>.Parse(timeCandidates[1]);
<anchor xml:id="__simaiparser_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;tickUnit&#32;=&#32;<link linkend="_class_mai_lib_1_1_chart">Chart</link>.<link linkend="_class_mai_lib_1_1_chart_1afd6070cce9947d515ba3c1ff4b8bc754">GetBPMTimeUnit</link>(bpm);
<anchor xml:id="__simaiparser_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;waitLength&#32;=&#32;(int)(waitLengthCandidate&#32;/&#32;tickUnit);
<anchor xml:id="__simaiparser_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lastLength&#32;=&#32;(int)(lastLengthCandidate&#32;/&#32;tickUnit);
<anchor xml:id="__simaiparser_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mai_lib_1_1_slide">Slide</link>(noteType,&#32;bar,&#32;tick,&#32;slideStartCandidate.<link linkend="_class_mai_lib_1_1_note_1ae93ef9ee5987428ab77603867d3ed864">Key</link>,&#32;waitLength,&#32;lastLength,&#32;fixedKeyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.CalculatedWaitTime&#32;=&#32;waitLengthCandidate;
<anchor xml:id="__simaiparser_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.CalculatedLastTime&#32;=&#32;lastLengthCandidate;
<anchor xml:id="__simaiparser_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.SlideStart&#32;=&#32;slideStartCandidate;
<anchor xml:id="__simaiparser_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00449"/>00449 
<anchor xml:id="__simaiparser_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.BPM&#32;=&#32;bpm;
<anchor xml:id="__simaiparser_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_mai_lib_1_1_slide">Slide</link>)result;
<anchor xml:id="__simaiparser_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00453"/>00453 
<anchor xml:id="__simaiparser_8cs_source_1l00454"/><link linkend="_class_mai_lib_1_1_simai_parser_1ae1d8931d0947aef4466818cf36b9b340">00454</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_mai_lib_1_1_slide">Slide</link>&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1ae1d8931d0947aef4466818cf36b9b340">SlideOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__simaiparser_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00458"/>00458 
<anchor xml:id="__simaiparser_8cs_source_1l00459"/><link linkend="_class_mai_lib_1_1_simai_parser_1a5ef9810c4ab7c4ceff8933801c533095">00459</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Tap&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a5ef9810c4ab7c4ceff8933801c533095">TapOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bar,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tick,&#32;<emphasis role="keywordtype">double</emphasis>&#32;bpm)
<anchor xml:id="__simaiparser_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isBreak&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;b&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isEXTap&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isTouch&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;A&quot;</emphasis>)&#32;||&#32;
<anchor xml:id="__simaiparser_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;B&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;C&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;D&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;E&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;F&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tap&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap();
<anchor xml:id="__simaiparser_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isTouch)
<anchor xml:id="__simaiparser_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasSpecialEffect&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;f&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;keyCandidate&#32;=&#32;Int32.Parse(token.Substring(1,&#32;1))&#32;-&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasSpecialEffect)
<anchor xml:id="__simaiparser_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;TTP&quot;</emphasis>,&#32;bar,&#32;tick,&#32;token.Substring(0,&#32;1)&#32;+&#32;keyCandidate.ToString(),&#32;1,&#32;<emphasis role="stringliteral">&quot;M1&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;TTP&quot;</emphasis>,&#32;bar,&#32;tick,&#32;token.Substring(0,&#32;1)&#32;+&#32;keyCandidate.ToString(),&#32;0,&#32;<emphasis role="stringliteral">&quot;M1&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isEXTap)
<anchor xml:id="__simaiparser_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;keyCandidate&#32;=&#32;Int32.Parse(token.Substring(0,&#32;1))&#32;-&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;_&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;XST&quot;</emphasis>,&#32;bar,&#32;tick,&#32;keyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;XTP&quot;</emphasis>,&#32;bar,&#32;tick,&#32;keyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isBreak)
<anchor xml:id="__simaiparser_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;keyCandidate&#32;=&#32;Int32.Parse(token.Substring(0,&#32;1))&#32;-&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;_&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;BST&quot;</emphasis>,&#32;bar,&#32;tick,&#32;keyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;BRK&quot;</emphasis>,&#32;bar,&#32;tick,&#32;keyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;keyCandidate&#32;=&#32;Int32.Parse(token.Substring(0,&#32;1))&#32;-&#32;1;
<anchor xml:id="__simaiparser_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;_&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;STR&quot;</emphasis>,&#32;bar,&#32;tick,&#32;keyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!token.Equals(<emphasis role="stringliteral">&quot;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Tap(<emphasis role="stringliteral">&quot;TAP&quot;</emphasis>,&#32;bar,&#32;tick,&#32;keyCandidate.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00511"/>00511 
<anchor xml:id="__simaiparser_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.BPM&#32;=&#32;bpm;
<anchor xml:id="__simaiparser_8cs_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00516"/>00516 
<anchor xml:id="__simaiparser_8cs_source_1l00517"/><link linkend="_class_mai_lib_1_1_simai_parser_1a4a8433f4671f204952d5f6af2ff114a9">00517</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Tap&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a4a8433f4671f204952d5f6af2ff114a9">TapOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__simaiparser_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00521"/>00521 
<anchor xml:id="__simaiparser_8cs_source_1l00527"/><link linkend="_class_mai_lib_1_1_simai_parser_1ad59f30b47d5cc9441f5eecc0f2bf7c63">00527</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;string&gt;&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1ad59f30b47d5cc9441f5eecc0f2bf7c63">EachGroupOfToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;();
<anchor xml:id="__simaiparser_8cs_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSlide&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;/&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;candidate&#32;=&#32;token.Split(<emphasis role="stringliteral">&quot;/&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;tokenCandidate&#32;<emphasis role="keywordflow">in</emphasis>&#32;candidate)
<anchor xml:id="__simaiparser_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(<link linkend="_class_mai_lib_1_1_simai_parser_1ad59f30b47d5cc9441f5eecc0f2bf7c63">EachGroupOfToken</link>(tokenCandidate));
<anchor xml:id="__simaiparser_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.Contains(<emphasis role="stringliteral">&quot;)&quot;</emphasis>)&#32;||&#32;token.Contains(<emphasis role="stringliteral">&quot;}&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;resultCandidate&#32;=&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a108147df5f8ab1e8c9f6d01acc1e25d1">ExtractParentheses</link>(token);
<anchor xml:id="__simaiparser_8cs_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;fixedCandidate&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__simaiparser_8cs_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;candidate&#32;<emphasis role="keywordflow">in</emphasis>&#32;resultCandidate)
<anchor xml:id="__simaiparser_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixedCandidate.AddRange(<link linkend="_class_mai_lib_1_1_simai_parser_1a108147df5f8ab1e8c9f6d01acc1e25d1">ExtractParentheses</link>(candidate));
<anchor xml:id="__simaiparser_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;candidate&#32;<emphasis role="keywordflow">in</emphasis>&#32;fixedCandidate)
<anchor xml:id="__simaiparser_8cs_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(<link linkend="_class_mai_lib_1_1_simai_parser_1aab4033133697dfa038a550fa22725c5d">ExtractEachSlides</link>(candidate));
<anchor xml:id="__simaiparser_8cs_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//lol&#32;this&#32;is&#32;the&#32;most&#32;stupid&#32;code&#32;I&#32;have&#32;ever&#32;wrote</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Int32.TryParse(token,&#32;out&#32;<emphasis role="keywordtype">int</emphasis>&#32;eachPair))
<anchor xml:id="__simaiparser_8cs_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>[]&#32;eachPairs&#32;=&#32;token.ToCharArray();
<anchor xml:id="__simaiparser_8cs_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;x&#32;<emphasis role="keywordflow">in</emphasis>&#32;eachPairs)
<anchor xml:id="__simaiparser_8cs_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.Add(x.ToString());
<anchor xml:id="__simaiparser_8cs_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSlide)
<anchor xml:id="__simaiparser_8cs_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//List&lt;string&gt;&#32;candidate&#32;=&#32;EachGroupOfToken(token);</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//foreach&#32;(string&#32;item&#32;in&#32;candidate)</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;result.AddRange(ExtractEachSlides(item));</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(<link linkend="_class_mai_lib_1_1_simai_parser_1aab4033133697dfa038a550fa22725c5d">ExtractEachSlides</link>(token));
<anchor xml:id="__simaiparser_8cs_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;result.Add(token);
<anchor xml:id="__simaiparser_8cs_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00580"/>00580 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00581"/>00581 
<anchor xml:id="__simaiparser_8cs_source_1l00587"/><link linkend="_class_mai_lib_1_1_simai_parser_1a108147df5f8ab1e8c9f6d01acc1e25d1">00587</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;string&gt;&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1a108147df5f8ab1e8c9f6d01acc1e25d1">ExtractParentheses</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00588"/>00588 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;();
<anchor xml:id="__simaiparser_8cs_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;containsBPM&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;containsMeasure&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00592"/>00592 
<anchor xml:id="__simaiparser_8cs_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(containsBPM)
<anchor xml:id="__simaiparser_8cs_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;tokenCandidate&#32;=&#32;token.Split(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;tokenResult&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__simaiparser_8cs_source_1l00597"/>00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tokenCandidate.Length;&#32;i++)
<anchor xml:id="__simaiparser_8cs_source_1l00598"/>00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00599"/>00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;x&#32;=&#32;tokenCandidate[i];
<anchor xml:id="__simaiparser_8cs_source_1l00600"/>00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.Contains(<emphasis role="stringliteral">&quot;(&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00601"/>00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00602"/>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;+=&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!x.Equals(<emphasis role="stringliteral">&quot;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenResult.Add(x);
<anchor xml:id="__simaiparser_8cs_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(tokenResult);
<anchor xml:id="__simaiparser_8cs_source_1l00610"/>00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(containsMeasure)
<anchor xml:id="__simaiparser_8cs_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;tokenCandidate&#32;=&#32;token.Split(<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;tokenResult&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__simaiparser_8cs_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tokenCandidate.Length;&#32;i++)
<anchor xml:id="__simaiparser_8cs_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;x&#32;=&#32;tokenCandidate[i];
<anchor xml:id="__simaiparser_8cs_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.Contains(<emphasis role="stringliteral">&quot;{&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;+=&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!x.Equals(<emphasis role="stringliteral">&quot;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenResult.Add(x);
<anchor xml:id="__simaiparser_8cs_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00626"/>00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00627"/>00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(tokenResult);
<anchor xml:id="__simaiparser_8cs_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.Add(token);
<anchor xml:id="__simaiparser_8cs_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00634"/>00634 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00635"/>00635 
<anchor xml:id="__simaiparser_8cs_source_1l00641"/><link linkend="_class_mai_lib_1_1_simai_parser_1aab4033133697dfa038a550fa22725c5d">00641</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;string&gt;&#32;<link linkend="_class_mai_lib_1_1_simai_parser_1aab4033133697dfa038a550fa22725c5d">ExtractEachSlides</link>(<emphasis role="keywordtype">string</emphasis>&#32;token)
<anchor xml:id="__simaiparser_8cs_source_1l00642"/>00642 &#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00643"/>00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSlide&#32;=&#32;token.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00651"/>00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>)&#32;||
<anchor xml:id="__simaiparser_8cs_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;();
<anchor xml:id="__simaiparser_8cs_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isSlide)
<anchor xml:id="__simaiparser_8cs_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.Add(token);
<anchor xml:id="__simaiparser_8cs_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!token.Contains(<emphasis role="stringliteral">&quot;*&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;splitCandidate&#32;=&#32;token;
<anchor xml:id="__simaiparser_8cs_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Parse&#32;first&#32;section</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00664"/>00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;qq&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00666"/>00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;qq&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00667"/>00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;qq&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00669"/>00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00670"/>00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00671"/>00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00672"/>00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;q&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;q&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;pp&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;pp&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00679"/>00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;pp&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00681"/>00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;p&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;p&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00688"/>00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00690"/>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;v&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;v&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;w&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;s&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00720"/>00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;z&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00722"/>00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;V&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;V&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;-&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00733"/>00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00735"/>00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00736"/>00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;components&#32;=&#32;token.Split(<emphasis role="stringliteral">&quot;*&quot;</emphasis>);
<anchor xml:id="__simaiparser_8cs_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(components.Length&#32;&lt;&#32;1)
<anchor xml:id="__simaiparser_8cs_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Exception(<emphasis role="stringliteral">&quot;SLIDE&#32;TOKEN&#32;NOT&#32;VALID:&#32;\n&quot;</emphasis>&#32;+&#32;token);
<anchor xml:id="__simaiparser_8cs_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;splitCandidate&#32;=&#32;components[0];
<anchor xml:id="__simaiparser_8cs_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Parse&#32;first&#32;section</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;qq&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;qq&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;qq&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;q&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;q&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;q&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;pp&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;pp&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;pp&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;p&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00765"/>00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;p&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;p&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;v&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;v&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;v&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;w&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;w&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00780"/>00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00781"/>00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00782"/>00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00783"/>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00785"/>00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00786"/>00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;s&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00796"/>00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;s&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;z&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;z&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;V&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;V&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;V&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(splitCandidate.Contains(<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
<anchor xml:id="__simaiparser_8cs_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00814"/>00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddRange(splitCandidate.Split(<emphasis role="stringliteral">&quot;-&quot;</emphasis>));
<anchor xml:id="__simaiparser_8cs_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;result[0]&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>;
<anchor xml:id="__simaiparser_8cs_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>&#32;+&#32;result[1];
<anchor xml:id="__simaiparser_8cs_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Add&#32;rest&#32;of&#32;slide:&#32;components&#32;after&#32;*&#32;is&#32;always&#32;</emphasis>
<anchor xml:id="__simaiparser_8cs_source_1l00819"/>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(components.Length&#32;&gt;&#32;1)
<anchor xml:id="__simaiparser_8cs_source_1l00820"/>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;components.Length;&#32;i++)
<anchor xml:id="__simaiparser_8cs_source_1l00822"/>00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__simaiparser_8cs_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.Add(components[i]);
<anchor xml:id="__simaiparser_8cs_source_1l00824"/>00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00826"/>00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__simaiparser_8cs_source_1l00829"/>00829 &#32;&#32;&#32;&#32;}
<anchor xml:id="__simaiparser_8cs_source_1l00830"/>00830 }
</programlisting></section>
